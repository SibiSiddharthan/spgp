/*
   Copyright (c) 2024 - 2025 Sibi Siddharthan

   Distributed under the MIT license.
   Refer to the LICENSE file at the root directory for details.
*/

#ifndef CRYPTO_EC_CURVES_PRIME_H
#define CRYPTO_EC_CURVES_PRIME_H

#include <bignum.h>
#include <ec.h>

// clang-format off

// NIST P-192
const bn_word_t nist_p192_p_words[3] = {0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF};
const bn_word_t nist_p192_a_words[3] = {0xFFFFFFFFFFFFFFFC, 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF};
const bn_word_t nist_p192_b_words[3] = {0xFEB8DEECC146B9B1, 0x0FA7E9AB72243049, 0x64210519E59C80E7};
const bn_word_t nist_p192_n_words[3] = {0x146BC9B1B4D22831, 0xFFFFFFFF99DEF836, 0xFFFFFFFFFFFFFFFF};
const bn_word_t nist_p192_gx_words[3] = {0xF4FF0AFD82FF1012, 0x7CBF20EB43A18800, 0x188DA80EB03090F6};
const bn_word_t nist_p192_gy_words[3] = {0x73F977A11E794811, 0x631011ED6B24CDD5, 0x07192B95FFC8DA78};

// NIST P-224
const bn_word_t nist_p224_p_words[4] = {0x0000000000000001, 0xFFFFFFFF00000000, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t nist_p224_a_words[4] = {0xFFFFFFFFFFFFFFFE, 0xFFFFFFFEFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t nist_p224_b_words[4] = {0x270B39432355FFB4, 0x5044B0B7D7BFD8BA, 0x0C04B3ABF5413256, 0x00000000B4050A85};
const bn_word_t nist_p224_n_words[4] = {0x13DD29455C5C2A3D, 0xFFFF16A2E0B8F03E, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t nist_p224_gx_words[4] = {0x343280D6115C1D21, 0x4A03C1D356C21122, 0x6BB4BF7F321390B9, 0x00000000B70E0CBD};
const bn_word_t nist_p224_gy_words[4] = {0x44D5819985007E34, 0xCD4375A05A074764, 0xB5F723FB4C22DFE6, 0x00000000BD376388};

// NIST P-256
const bn_word_t nist_p256_p_words[4] = {0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF, 0x0000000000000000, 0xFFFFFFFF00000001};
const bn_word_t nist_p256_a_words[4] = {0xFFFFFFFFFFFFFFFC, 0x00000000FFFFFFFF, 0x0000000000000000, 0xFFFFFFFF00000001};
const bn_word_t nist_p256_b_words[4] = {0x3BCE3C3E27D2604B, 0x651D06B0CC53B0F6, 0xB3EBBD55769886BC, 0x5AC635D8AA3A93E7};
const bn_word_t nist_p256_n_words[4] = {0xF3B9CAC2FC632551, 0xBCE6FAADA7179E84, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFF00000000};
const bn_word_t nist_p256_gx_words[4] = {0xF4A13945D898C296, 0x77037D812DEB33A0, 0xF8BCE6E563A440F2, 0x6B17D1F2E12C4247};
const bn_word_t nist_p256_gy_words[4] = {0xCBB6406837BF51F5, 0x2BCE33576B315ECE, 0x8EE7EB4A7C0F9E16, 0x4FE342E2FE1A7F9B};

// NIST P-384
const bn_word_t nist_p384_p_words[6] = {0x00000000FFFFFFFF, 0xFFFFFFFF00000000, 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF};
const bn_word_t nist_p384_a_words[6] = {0x00000000FFFFFFFC, 0xFFFFFFFF00000000, 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF};
const bn_word_t nist_p384_b_words[6] = {0x2A85C8EDD3EC2AEF, 0xC656398D8A2ED19D, 0x0314088F5013875A, 0x181D9C6EFE814112, 0x988E056BE3F82D19, 0xB3312FA7E23EE7E4};
const bn_word_t nist_p384_n_words[6] = {0xECEC196ACCC52973, 0x581A0DB248B0A77A, 0xC7634D81F4372DDF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF};
const bn_word_t nist_p384_gx_words[6] = {0x3A545E3872760AB7, 0x5502F25DBF55296C, 0x59F741E082542A38, 0x6E1D3B628BA79B98, 0x8EB1C71EF320AD74, 0xAA87CA22BE8B0537};
const bn_word_t nist_p384_gy_words[6] = {0x7A431D7C90EA0E5F, 0x0A60B1CE1D7E819D, 0xE9DA3113B5F0B8C0, 0xF8F41DBD289A147C, 0x5D9E98BF9292DC29, 0x3617DE4A96262C6F};

// NIST P-521
const bn_word_t nist_p521_p_words[9] = {0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x00000000000001FF};
const bn_word_t nist_p521_a_words[9] = {0xFFFFFFFFFFFFFFFC, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x00000000000001FF};
const bn_word_t nist_p521_b_words[9] = {0xEF451FD46B503F00, 0x3573DF883D2C34F1, 0x1652C0BD3BB1BF07, 0x56193951EC7E937B, 0xB8B489918EF109E1, 0xA2DA725B99B315F3, 0x929A21A0B68540EE, 0x953EB9618E1C9A1F, 0x0000000000000051};
const bn_word_t nist_p521_n_words[9] = {0xBB6FB71E91386409, 0x3BB5C9B8899C47AE, 0x7FCC0148F709A5D0, 0x51868783BF2F966B, 0xFFFFFFFFFFFFFFFA, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x00000000000001FF};
const bn_word_t nist_p521_gx_words[9] = {0xF97E7E31C2E5BD66, 0x3348B3C1856A429B, 0xFE1DC127A2FFA8DE, 0xA14B5E77EFE75928, 0xF828AF606B4D3DBA, 0x9C648139053FB521, 0x9E3ECB662395B442, 0x858E06B70404E9CD, 0x00000000000000C6};
const bn_word_t nist_p521_gy_words[9] = {0x88BE94769FD16650, 0x353C7086A272C240, 0xC550B9013FAD0761, 0x97EE72995EF42640, 0x17AFBD17273E662C, 0x98F54449579B4468, 0x5C8A5FB42C7D1BD9, 0x39296A789A3BC004, 0x0000000000000118};

// SECP-160k1
const bn_word_t secp_160k1_p_words[3] = {0xFFFFFFFEFFFFAC73, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t secp_160k1_a_words[1] = {0x0};
const bn_word_t secp_160k1_b_words[1] = {0x0000000000000007};
const bn_word_t secp_160k1_n_words[3] = {0x16DFAB9ACA16B6B3, 0x000000000001B8FA, 0x0000000100000000};
const bn_word_t secp_160k1_gx_words[3] = {0x3036F4F5DD4D7EBB, 0xE37AA192A4019E76, 0x000000003B4C382C};
const bn_word_t secp_160k1_gy_words[3] = {0x531733C3F03C4FEE, 0x318FDCED6BC28286, 0x00000000938CF935};

// SECP-160R1
const bn_word_t secp_160r1_p_words[3] = {0xFFFFFFFF7FFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t secp_160r1_a_words[3] = {0xFFFFFFFF7FFFFFFC, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t secp_160r1_b_words[3] = {0x81D4D4ADC565FA45, 0x54BD7A8B65ACF89F, 0x000000001C97BEFC};
const bn_word_t secp_160r1_n_words[3] = {0xF927AED3CA752257, 0x000000000001F4C8, 0x0000000100000000};
const bn_word_t secp_160r1_gx_words[3] = {0x68C38BB913CBFC82, 0x8EF5732846646989, 0x000000004A96B568};
const bn_word_t secp_160r1_gy_words[3] = {0x042351377AC5FB32, 0x3168947D59DCC912, 0x0000000023A62855};

// SECP-160R2
const bn_word_t secp_160r2_p_words[3] = {0xFFFFFFFEFFFFAC73, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t secp_160r2_a_words[3] = {0xFFFFFFFEFFFFAC70, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t secp_160r2_b_words[3] = {0x04664D5AF50388BA, 0xFB59EB8BAB572749, 0x00000000B4E134D3};
const bn_word_t secp_160r2_n_words[3] = {0xE786A818F3A1A16B, 0x000000000000351E, 0x0000000100000000};
const bn_word_t secp_160r2_gx_words[3] = {0x30F7199D3144CE6D, 0x293A117E1F4FF11B, 0x0000000052DCB034};
const bn_word_t secp_160r2_gy_words[3] = {0xF9982CFEA7D43F2E, 0xE331F296E071FA0D, 0x00000000FEAFFEF2};

// SECP-192K1
const bn_word_t secp_192k1_p_words[3] = {0xFFFFFFFEFFFFEE37, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF};
const bn_word_t secp_192k1_a_words[1] = {0x0};
const bn_word_t secp_192k1_b_words[1] = {0x0000000000000003};
const bn_word_t secp_192k1_n_words[3] = {0x0F69466A74DEFD8D, 0xFFFFFFFE26F2FC17, 0xFFFFFFFFFFFFFFFF};
const bn_word_t secp_192k1_gx_words[3] = {0x1DA5D1B1EAE06C7D, 0x26B07D0280B7F434, 0xDB4FF10EC057E9AE};
const bn_word_t secp_192k1_gy_words[3] = {0x4082AA88D95E2F9D, 0x844163D015BE8634, 0x9B2F2F6D9C5628A7};

// SECP-224K1
const bn_word_t secp_224k1_p_words[4] = {0xFFFFFFFEFFFFE56D, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0x00000000FFFFFFFF};
const bn_word_t secp_224k1_a_words[1] = {0x0};
const bn_word_t secp_224k1_b_words[1] = {0x0000000000000005};
const bn_word_t secp_224k1_n_words[4] = {0xCAF0A971769FB1F7, 0x0001DCE8D2EC6184, 0x0000000000000000, 0x0000000100000000};
const bn_word_t secp_224k1_gx_words[4] = {0x0F7E650EB6B7A45C, 0x69A467E9E47075A9, 0x4DF099DF30FC28A1, 0x00000000A1455B33};
const bn_word_t secp_224k1_gy_words[4] = {0xE2CA4BDB556D61A5, 0xF7E319F7C0B0BD59, 0x7FBA344282CAFBD6, 0x000000007E089FED};

// SECP-256K1
const bn_word_t secp_256k1_p_words[4] = {0xFFFFFFFEFFFFFC2F, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF, 0xFFFFFFFFFFFFFFFF};
const bn_word_t secp_256k1_a_words[1] = {0x0};
const bn_word_t secp_256k1_b_words[1] = {0x0000000000000007};
const bn_word_t secp_256k1_n_words[4] = {0xBFD25E8CD0364141, 0xBAAEDCE6AF48A03B, 0xFFFFFFFFFFFFFFFE, 0xFFFFFFFFFFFFFFFF};
const bn_word_t secp_256k1_gx_words[4] = {0x59F2815B16F81798, 0x029BFCDB2DCE28D9, 0x55A06295CE870B07, 0x79BE667EF9DCBBAC};
const bn_word_t secp_256k1_gy_words[4] = {0x9C47D08FFB10D4B8, 0xFD17B448A6855419, 0x5DA4FBFC0E1108A8, 0x483ADA7726A3C465};

// clang-format on

// Functions
uint32_t ec_prime_point_encode(struct _ec_group *eg, struct _ec_point *ep, void *buffer, uint32_t size, uint32_t compression);
ec_point *ec_prime_point_decode(struct _ec_group *eg, struct _ec_point *ep, void *buffer, uint32_t size);

uint32_t ec_prime_point_at_infinity(ec_group *eg, ec_point *a);
uint32_t ec_prime_point_on_curve(ec_group *eg, ec_point *a);

ec_point *ec_prime_point_double(ec_group *eg, ec_point *r, ec_point *a);
ec_point *ec_prime_point_add(ec_group *eg, ec_point *r, ec_point *a, ec_point *b);
ec_point *ec_prime_point_multiply(ec_group *eg, ec_point *r, ec_point *a, bignum_t *n);

#endif
